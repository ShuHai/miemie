(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.miemie = factory());
}(this, (function () { 'use strict';

var ArrayMethod = function ArrayMethod () {};

ArrayMethod.prototype.hello = function hello (message) {
    var a = message || 'hello world';
    console.log(a);
};

// 数组去重
ArrayMethod.prototype.unique = function unique (arr) {
    // let result = []
    // arr.map(item => {
    //   result.indexOf(item) === -1 && result.push(item)
    // })
    // return result

    var _obj = {};
    arr.forEach(function (x) {
        _obj[x] = '';
    });
    return Object.getOwnPropertyNames(_obj)
};

// 判断是否是数组
ArrayMethod.prototype.isArray = function isArray (object) {
    return Object.prototype.toString.call(object) === '[object Array]'
};

// 数组求交集
ArrayMethod.prototype.intersection = function intersection (arr1, arr2) {
    var setArr1 = new Set(arr1);
    var setArr2 = new Set(arr2);
    var result = new Set([].concat( setArr1 ).filter(function (x) {
        return setArr2.has(x)
    }));
    return Array.from(result)
};

// 数组求并集
ArrayMethod.prototype.union = function union (arr1, arr2) {
    var setArr1 = new Set(arr1);
    var setArr2 = new Set(arr2);
    return Array.from(new Set(setArr1.concat( setArr2)))
};

// 数组求差集
ArrayMethod.prototype.difference = function difference (arr1, arr2) {
    var setArr1 = new Set(arr1);
    var setArr2 = new Set(arr2);
    var result = new Set([].concat( setArr1 ).filter(function (x) {
        return !setArr2.has(x)
    }));
    return Array.from(result)
};

// 数组前n个元素去掉
ArrayMethod.prototype.drop = function drop (arr, n) {
    if (!n && arr) {
        arr.shift();
        return arr
    } else {
        for (var i = 0; i < n; i++) {
            arr.shift();
        }
        return arr
    }

};

var DateMethod = function DateMethod () {};

DateMethod.prototype.getDayFromToday = function getDayFromToday (time) {
  var day = new Date();
  day.setDate(day.getDate() + time);
  var dayObj = {};
  dayObj.year = day.getFullYear();
  dayObj.month = day.getMonth() + 1;
  dayObj.day = day.getDate();
  dayObj.hour = day.getHours();
  dayObj.minute = day.getMinutes();
  dayObj.second = day.getSeconds();
  dayObj.weekend = day.getDay();
  dayObj.tiemStamp = day.getTime();
  return dayObj
};

// 获取所有跟今天有关的信息
DateMethod.prototype.getToday = function getToday () {
  return this.getDayFromToday(0)
};

var MathMethod = function MathMethod () {};

var NumberMethod = function NumberMethod () {};

NumberMethod.prototype.isNumber = function isNumber (num) {
  return !isNaN(num)
};
// 求和
NumberMethod.prototype.sum = function sum () {
    var this$1 = this;

  var sum = 0;
  var args = Array.prototype.slice.call(arguments);
  args.map(function (item) {
    sum += this$1.isNumber(item) ? item : 0;
  });
  return sum
};

var ObjectMethod = function ObjectMethod () {};

ObjectMethod.prototype.deepClone = function deepClone (obj) {
    var this$1 = this;

  var newObj = obj.constructor === Array ? [] : {};
  if (typeof obj !== 'object') {
    return
  } else {
    for (var i in obj) {
      newObj[i] = typeof obj[i] === 'object' ? this$1.deepClone(obj[i]) : obj[i];
    }
  }
  return newObj
};

// 合并对象,同样元素会保留后者
ObjectMethod.prototype.assign = function assign () {
  var args = Array.prototype.slice.call(arguments);
  var obj = {};
  if (args.length) {
    args.forEach(function (item) {
      obj = Object.assign(obj, item);
    });
  }
  return obj
};

// 判断对象属性在其原型上是否存在
ObjectMethod.prototype.hasPrototypeProperty = function hasPrototypeProperty (object, name) {
  return !object.hasOwnProperty(name) && (name in object)
};

var RegMethod = function RegMethod () {};

RegMethod.prototype.justCheck = function justCheck (string, rule) {
  var reg = new RegExp(rule);
  return reg.test(string)
};
// 判断字符串中是否全是数字,length可选，指定位数
RegMethod.prototype.checkNum = function checkNum (string, length) {
  if (length) {
    return this.justCheck(string, ("^\\d{" + length + "}$"))
  } else {
    return this.justCheck(string, '^[0-9]*$')
  }
};

// 判断手机号是否合法, true严格， false只检查位数和数字
RegMethod.prototype.checkPhone = function checkPhone (string, isStrict) {
  if (isStrict) {
    return this.justCheck(string, '^1[34578]\\d{9}$')
  } else {
    return this.justCheck(string, '^\\d{11}$')
  }
};

var StringMethod = function StringMethod () {};

StringMethod.prototype.isString = function isString (str) {
  return typeof str === 'string'
};

// 首字母大写
StringMethod.prototype.capitalize = function capitalize (str) {
  if (this.isString(str)) {
    var arr = str.split('');
    arr[0] = arr[0].toUpperCase();
    return arr.join('')
  }
};

// 去空格, 默认去掉全部，可选只去掉左边(left)或者右边(right)
StringMethod.prototype.trim = function trim (string, direction) {
  if (direction === 'left') {
    return string.replace(/(^\s*)/g, '')
  } else if (direction === 'right') {
    return string.replace(/(\s*$)/g, '')
  } else {
    return string.replace(/(^\s*)|(\s*$)/g, '')
  }
};

var Mie = function Mie () {
  this.array = new ArrayMethod();
  this.date = new DateMethod();
  this.object = new MathMethod();
  this.number = new NumberMethod();
  this.object = new ObjectMethod();
  this.reg = new RegMethod();
  this.string = new StringMethod();
};

var miemie = new Mie();

return miemie;

})));
