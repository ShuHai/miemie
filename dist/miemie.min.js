(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.miemie = factory());
}(this, (function () { 'use strict';

var ArrayMethod = function ArrayMethod () {};

ArrayMethod.prototype.hello = function hello (message) {
  var a = message || 'hello world';
  console.log(a);
};

// 数组去重
ArrayMethod.prototype.unique = function unique (arr) {
  var result = [];
  arr.map(function (item) {
    result.indexOf(item) === -1 ? result.push(item) : null;
  });
  return result
};

// 判断是否是数组
ArrayMethod.prototype.isArray = function isArray (object) {
  return Object.prototype.toString.call(object) === '[object Array]'
};

// 数组求交集
ArrayMethod.prototype.intersection = function intersection () {
    var this$1 = this;

  console.log(arguments);
  var args = Array.prototype.slice.call(arguments);
  var arr = [];
  var re = 0;
  args.map(function (item) {
    arr = arr.length ? arr : this$1.isArray(item) ? item : arr;
    re = arr ? 1 : 2;
    console.log(re);
    console.log(arr);
    // arr.indexOf(item) !== -1 ? arr.push(item) : null
  });
  return arr
};

// 数组求并集
ArrayMethod.prototype.union = function union () {

};

// 数组求差集
ArrayMethod.prototype.difference = function difference () {

};

var Number = function Number () {};

Number.prototype.isNumber = function isNumber (num) {
  return !isNaN(num)
};
// 求和
Number.prototype.sum = function sum () {
    var this$1 = this;

  var sum = 0;
  var args = Array.prototype.slice.call(arguments);
  args.map(function (item) {
    sum += this$1.isNumber(item) ? item : 0;
  });
  return sum
};

var Mie = function Mie () {
  this.array = new ArrayMethod();
  this.number = new Number();
};

var miemie = new Mie();

return miemie;

})));
